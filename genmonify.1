.nh
.TH GENMONIFY 1 2020\-11\-24 Linux "User Manuals"
.SH NAME
.PP
\fB\fCgenmonify\fR \- precision control for xfce4\-panels
genmon plugin

.SH SYNOPSIS
.PP
.RS

.nf
genmonify [\-\-module|\-o MODULE\_ALIAS] [OPTIONS] [MESSAGE]
genmonify [\-\-module|\-o MODULE\_ALIAS] [\-\-icon|\-i ICON\_NAME] [\-\-img|\-I IMAGE] [\-\-tooltip|\-l PANGO] [\-\-progress|\-p PERCENTAGE] [\-\-click|\-C COMMAND] [\-\-iconclick|\-c COMMAND] [\-\-expire\-time|\-t SECONDS] [\-\-foreground|\-f COLOR] [\-\-background|\-b COLOR] [\-\-msg|\-s MESSAGE] [MESSAGE]
genmonify [\-\-module|\-o MODULE\_ALIAS] \-\-clear|\-x
genmonify [\-\-module|\-o MODULE\_ALIAS] \-\-get|\-g
genmonify \-\-list
genmonify \-\-help|\-h
genmonify \-\-version|\-v

.fi
.RE

.SH DESCRIPTION
.PP
To make genmonify (and genmon) somewhat usable
you need to do two things:
.br
1. set up one or more genmon plugins/modules in

.PP
your xfce4\-panel
.br
2. set up aliases for these modules.

.PP
The first step is easy, just add a genmon module
to your panel and open its properties dialog.
There as the \fBcommand\fP enter:
.br
\fB\fCgenmonify \-\-module NAME\fR
.br
where NAME can be anything you want. Also be sure
to set the \fBPeriod\fP (interval) to max value of
86400 seconds (24h).

.PP
The second step is a little bit trickier. First
execute \fB\fCgenmonify\fR without any arguments. This
should create an example \fIalias\-file\fP\&. The default
location for this file is
\fB\~/.config/genmonify/module\-list\fP In that file
there are instructions for how to set the aliases
for the modules. \fBgenmonify\fP updates the modules
by sending the following command:
.br
\fB\fCxfce4\-panel
\-\-plugin\-event=genmon\-ID:refresh:bool:true\fR

.PP
Where ID should be replaced with the actual
plugin\-id.

.PP
The easiest way to find the IDs is to exctue
genmonify with the \fB\fC\-\-list\fR option.

.PP
.RS

.nf
genomify \-\-list
24    25    18    23    10    19

.fi
.RE

.PP
Found IDs are printed left to right in the order
they appear in the panel.

.PP
If this doesn't work you have to manually find
the IDs in the file:

.PP
\fB\~/.config/xfce4/xfconf/xfce\-perchannel\-xml/xfce4\-panel.xml\fP
.br
find lines that looks like this (search for
"\fIgenmon\fP"):
.br
\fB\fC<property name="plugin\-2" type="string"
value="genmon"/>\fR

.PP
Lets say we have two genmon plugins, and their
ID's are \fB2\fP and \fB10\fP\&. And they have the
following commands set in their respective
properties:
.br
2: \fB\fCgenmonify \-\-module mediainfo\fR
.br
10: \fB\fCgenmonify \-\-module internet\fR

.PP
we should then add the following lines to the
\fBmodule\-list file\fP:

.PP
.RS

.nf
modules[mediainfo]=2
modules[internet]=10

.fi
.RE

.PP
When genmonify is executed with only the
\fB\fC\-\-module MODULE\_NAME\fR option, all it will do is
\fB\fCcat\fR the content of the file:
\fB\fC/tmp/genmonify/MODULE\_NAME\fR . When this is done
from a genmon plugin in the panel, it will set the
plugins text \fBbased\fP on the content of the file.

.PP
Any arguments to the \fB\fCgenmonify\fR command that
doesn't belong to an option, will get redirected
(and formatted if needed or requested) to
\fB\fC/tmp/genmonify/MODULE\_NAME\fR\&. Then the command
\fB\fCxfce4\-panel
\-\-plugin\-event=genmon\-ID:refresh:bool:true\fR  will

.PP
get executed, causing the module to get updated.

.PP
EXAMPLE:

.PP
.RS

.nf
$ genmonify \-\-module mediainfo testing one three four

.fi
.RE

.PP
this will first create (or overwrite) the file:
/tmp/genmonify/mediainfo with the single line:
testing one three four

.PP
then the command:  \fB\fCxfce4\-panel
\-\-plugin\-event=genmon\-2:refresh:bool:true\fR
.br
is automatically executed, which will update the
plugin and the \fBCommand\fP set in the properties
will run again: (\fB\fCgenmonify \-\-module mediainfo\fR),
which in turn will update the module with the
string: "testing one three four"

.PP
The \fB\fC\-\-expire\-time SECONDS\fR option can be used to
clear the module when SECONDS have passed. It is
also possible to manually clear a module with the
\fB\fC\-\-clear\fR option.

.PP
genmonify is shipped with the script
\fBgenmonifypop\fP, which can be used to execute
commands on the \fB\fC\-\-msg\fRline. It will only execute
a command if it is prefixed with the word
\fBPOLIPOP\fP\&. And the first argument to
\fBgenmonifypop\fP needs to be the name of the
module, it is sweet to bind genmonifypop to a
hotkey...

.PP
.RS

.nf
$ genmonify \-\-module genmonifyModule1 \-\-msg "POLIPOP notify\-send 'hello pop'" hello guy
$ genmonifypop genmonifyModule1

.fi
.RE

.PP
In the example below you can see how \fB\fC\-\-msg\fR and
\fB\fC\-\-get\fR can be used to keep track and toggle a
modules state.

.PP
\fB\fCgenmonifymodetoggler.sh\fR

.PP
.RS

.nf
#!/bin/bash

thisscript="$(readlink \-f "$0")"

if [[ $(genmonify \-\-module genmonifyModule1 \-\-get) = mode1 ]]; then
    genmonify \-\-module genmonifyModule1   \\
           \-\-iconclick "$thisscript"      \\
           \-\-foreground '#00FF00'         \\
           \-\-icon dialog\-warning          \\
           \-\-msg "mode2"                  \\
           this is mode two
else 
    genmonify \-\-module genmonifyModule1   \\
           \-\-iconclick "$thisscript"      \\
           \-\-foreground '#FF0000'         \\
           \-\-icon dialog\-warning          \\
           \-\-msg "mode1"                  \\
           this is mode one
fi

.fi
.RE

.SH OPTIONS
.PP
\fB\fC\-\-module\fR|\fB\fC\-o\fR MODULE\_ALIAS
.br
Name of target module

.PP
\fB\fC\-\-icon\fR|\fB\fC\-i\fR ICON\_NAME
.br
Sets the \fB\fC<icon>\fR to use. use the icon name, not
the full path. And it will use the global
icon\-theme.

.PP
\fB\fC\-\-img\fR|\fB\fC\-I\fR IMAGE
.br
Sets the \fB\fC<img>\fR to use. Full path to an image to
prefix the label with.

.PP
\fB\fC\-\-tooltip\fR|\fB\fC\-l\fR PANGO
.br
Text to display in the tooltip, pango markup can
be used for style and color.

.PP
\fB\fC\-\-progress\fR|\fB\fC\-p\fR PERCENTAGE
.br
Percentage to display in the progressbar.

.PP
\fB\fC\-\-click\fR|\fB\fC\-C\fR COMMAND
.br
COMMAND will be executed when the \fBIMAGE\fP is
clicked.

.PP
\fB\fC\-\-iconclick\fR|\fB\fC\-c\fR COMMAND
.br
COMMAND will be executed when the \fBICON\fP is
clicked.

.PP
\fB\fC\-\-expire\-time\fR|\fB\fC\-t\fR SECONDS
.br
If set module will get cleared after SECONDS

.PP
\fB\fC\-\-foreground\fR|\fB\fC\-f\fR COLOR
.br
color value for MESSAGE foreground color.

.PP
\fB\fC\-\-background\fR|\fB\fC\-b\fR COLOR
.br
color value for MESSAGE background color.

.PP
\fB\fC\-\-msg\fR|\fB\fC\-s\fR MESSAGE
.br
This string will not be visible in the module.
But stored in the modules file inside \fB\fC<msg>\fR
tags. The string can be retrieved with the \fB\fC\-\-get\fR
option.

.PP
\fB\fC\-\-clear\fR|\fB\fC\-x\fR
.br
Clears the module.

.PP
\fB\fC\-\-get\fR|\fB\fC\-g\fR
.br
Prints the content of target modules \fB\fC<msg>\fR if
there is any.

.PP
\fB\fC\-\-list\fR
.br
Prints the plugin IDs of all Generic Monitors
from left to right

.PP
\fB\fC\-\-help\fR|\fB\fC\-h\fR
.br
Show help and exit.

.PP
\fB\fC\-\-version\fR|\fB\fC\-v\fR
.br
Show version and exit.

.SH ENVIRONMENT
.PP
\fB\fCXDG\_CONFIG\_HOME\fR

.PP
defaults to: $HOME/.config

.PP
\fB\fCGENMONIFY\_DIR\fR

.PP
defaults to: $XDG\_CONFIG\_HOME/genmonify

.PP
\fB\fCGENMONIFY\_TMP\_DIR\fR

.PP
defaults to: /tmp/genmonify

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCgawk\fR \fB\fCsed\fR \fB\fCxfce4\-panel\fR \fB\fCxfsettings\fR

.PP
budRich https://github.com/budlabs/genmonify
\[la]https://github.com/budlabs/genmonify\[ra]

.SH SEE ALSO
.PP
https://gitlab.xfce.org/panel\-plugins/xfce4\-genmon\-plugin, polify(1),
