#!/usr/bin/env bash

___printversion(){
  
cat << 'EOB' >&2
genmonify - version: 2020.11.24.2
updated: 2020-11-24 by budRich
EOB
}


# environment variables
: "${XDG_CONFIG_HOME:=$HOME/.config}"
: "${GENMONIFY_DIR:=$XDG_CONFIG_HOME/genmonify}"
: "${GENMONIFY_TMP_DIR:=/tmp/genmonify}"


main(){

  # all non option arguments will be treated as the
  # message to display in the target genmon module
  message="$*"

  declare -A modules=([gurl]=2 [mediainfo]=10)

  # the aliasfile will override the modules array
  aliasfile=$GENMONIFY_DIR/module-list
  [[ -f $aliasfile ]] || createconf "$GENMONIFY_DIR"
  source "$aliasfile"

  # module should here have the actual panel-id
  module="${__o[module]:+${modules[${__o[module]}]}}"

  # if no module is found in the modules array
  # it is still possible to trigger an update event
  # and the first found (?) genmon module will get
  # updated
  cmd_update=(
    xfce4-panel 
    "--plugin-event=genmon${module:+-$module}:refresh:bool:true"
  )

  trg_file="$GENMONIFY_TMP_DIR/${__o[module]:-default}"
  mkdir -p "${trg_file%/*}"

  # by always printing a zero_width_space
  # character we can clear the module and get no
  # funky output if f.i. the target file is empty
  # or removed
  zero_width_space=$(printf %b '\u200b')

  if ((__o[clear])); then
    echo -n "$zero_width_space" > "$trg_file"
    exec "${cmd_update[@]}"
  elif ((__o[list])); then
    listall
  elif ((__o[get])); then
    # print everyting inside <msg> tag (set with -s)
    sed -rn 's/^<msg>([^<]+)<.+/\1/p' "$trg_file"
  elif [[ -z $message${__o[img]}${__o[icon]} ]]; then
    # this is the default action that the module itself
    # should get. activated when there are no message.
    # genmonify --module MODULE_NAME
    echo -n "$zero_width_space"
    [[ -f $trg_file ]] && cat "$trg_file"
  else
    # write file and update
    op+="${__o[msg]:+<msg>${__o[msg]}</msg>$'\n'}"

    op+="<txt><span"
    op+="${__o[foreground]:+" foreground='${__o[foreground]}'"}"
    op+="${__o[background]:+" background='${__o[background]}'"}"
    op+=">${message//&/&amp;}</span></txt>"

    op+="${__o[tooltip]:+$'\n'<tool>${__o[tooltip]//&/&amp;}</tool>}"
    op+="${__o[icon]:+$'\n'<icon>${__o[icon]}</icon>}"
    op+="${__o[click]:+$'\n'<click>${__o[click]}</click>}"
    op+="${__o[iconclick]:+$'\n'<iconclick>${__o[iconclick]}</iconclick>}"
    op+="${__o[progress]:+$'\n'<bar>${__o[progress]}</bar>}"

    [[ -n ${__o[img]} && -f ${__o[img]} ]] \
      && op+=$'\n'"<img>${__o[img]}</img>"

    echo "$op" > "$trg_file"
    "${cmd_update[@]}"

    ((__o[expire-time])) && { 
      sleep "${__o[expire-time]}"
      # don't clear if the module has changed during
      # the sleep:
      [[ $op = "$(< "$trg_file")" ]] && {
        echo -n "$zero_width_space" > "$trg_file"
        exec "${cmd_update[@]}"
      }
    } &
  fi
  
}

___printhelp(){
  
cat << 'EOB' >&2
genmonify - precision control for xfce4-panels genmon plugin


SYNOPSIS
--------
genmonify [--module|-o MODULE_ALIAS] [OPTIONS] [MESSAGE]
genmonify [--module|-o MODULE_ALIAS] [--icon|-i ICON_NAME] [--img|-I IMAGE] [--tooltip|-l PANGO] [--progress|-p PERCENTAGE] [--click|-C COMMAND] [--iconclick|-c COMMAND] [--expire-time|-t SECONDS] [--foreground|-f COLOR] [--background|-b COLOR] [--msg|-s MESSAGE] [MESSAGE]
genmonify [--module|-o MODULE_ALIAS] --clear|-x
genmonify [--module|-o MODULE_ALIAS] --get|-g
genmonify --list
genmonify --help|-h
genmonify --version|-v

OPTIONS
-------

--module|-o MODULE_ALIAS  
Name of target module


--icon|-i ICON_NAME  
Sets the <icon> to use. use the icon name, not
the full path. And it will use the global
icon-theme.


--img|-I IMAGE  
Sets the <img> to use. Full path to an image to
prefix the label with.


--tooltip|-l PANGO  
Text to display in the tooltip, pango markup can
be used for style and color.


--progress|-p PERCENTAGE  
Percentage to display in the progressbar.


--click|-C COMMAND  
COMMAND will be executed when the IMAGE is
clicked.


--iconclick|-c COMMAND  
COMMAND will be executed when the ICON is
clicked.


--expire-time|-t SECONDS  
If set module will get cleared after SECONDS


--foreground|-f COLOR  
color value for MESSAGE foreground color.


--background|-b COLOR  
color value for MESSAGE background color.


--msg|-s MESSAGE  
This string will not be visible in the module.
But stored in the modules file inside <msg> tags.
The string can be retrieved with the --get option.


--clear|-x  
Clears the module.


--get|-g  
Prints the content of target modules <msg> if
there is any.


--list  
Prints the plugin IDs of all Generic Monitors
from left to right


--help|-h  
Show help and exit.


--version|-v  
Show version and exit.

EOB
}


### createconf() function is automatically generated
### by bashbud based on the content of the conf/ directory

createconf() {
local trgdir="$1"
declare -a aconfdirs

aconfdirs=(
)

mkdir -p "$1" "${aconfdirs[@]}"

cat << 'EOCONF' > "$trgdir/module-list"
# this file will be sourced by genmonify
# specify the aliases for the modules here
# you need to know the plugin-id of the modules
#
# use the --list option with genmonify
# to print all genmon IDs from left to right as they
# appear.
# 
# or try to manually find the ID's in the file:
# ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml
#
# below is an example line, and the ID is 2 (plugin-2)
# <property name="plugin-2" type="string" value="genmon"/>
#
# below is an example alias:
# modules[mycustomAlias]=2
#
# remember to uncomment (remove the # from the beginning of the line)
# when everything is working you should be able to 
# update the plugin with a command like this:
#
# genmonify --module mycustomAlias "whateverâ„¢"
#
#
# EXAMPLE LIST:
# -----------
# modules[mycustomAlias]=2
# modules[news]=3
# modules[webhooked]=2

EOCONF

}

set -E
trap '[ "$?" -ne 98 ] || exit 98' ERR

ERM(){

  local mode OPTIND

  getopts xr mode
  case "$mode" in
    x ) urg=critical ; prefix='[ERROR]: '   ;;
    r ) urg=low      ; prefix='[WARNING]: ' ;;
    * ) urg=normal   ; mode=m ;;
  esac
  shift $((OPTIND-1))

  msg="${prefix}$*"

  if [[ -t 2 ]]; then
    echo "$msg" >&2
  else
    notify-send -u "$urg" "$msg"
  fi

  [[ $mode = x ]] && exit 98
}

ERX() { ERM -x "$*" ;}
ERR() { ERM -r "$*" ;}
ERH(){
  {
    ___printhelp 
    [[ -n "$*" ]] && printf '\n%s\n' "$*"
  } >&2 
  exit 77
}

listall() {

  local file
  file=$XDG_CONFIG_HOME/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml

  [[ -f $file ]] || ERX "$file not found"

  awk '
    # <property name="plugin-23" type="string" value="genmon"/>
    # use these properties to identify all genmon modules
    # store ID in genmons array
    #
    match($0,/.+name="plugin-([0-9]+)".+genmon"\/>/,ma) \
      { genmons[ma[1]]=1 }


    # <property name="plugin-ids" type="array">
    #   <value type="int" value="20"/>
    #   ...
    # </property>
    # plugin-ids array, contain the order of plugins
    # print value (padded with space) if it stored in genmons array
    #
    match($0,/<value type="int" value="([0-9]+)"\/>/,ma) \
      && (genmons[ma[1]]) { printf("%-6s",ma[1]) }

    END {print ""}

  # since the plugin-ids array appear before we know
  # the type the IDs refer to. We parse the file twice.
  #
  ' "$file" "$file"
  
}



declare -A __o
options="$(
  getopt --name "[ERROR]:genmonify" \
    --options "o:i:I:l:p:C:c:t:f:b:s:xghv" \
    --longoptions "module:,icon:,img:,tooltip:,progress:,click:,iconclick:,expire-time:,foreground:,background:,msg:,clear,get,list,help,version," \
    -- "$@" || exit 98
)"

eval set -- "$options"
unset options

while true; do
  case "$1" in
    --module     | -o ) __o[module]="${2:-}" ; shift ;;
    --icon       | -i ) __o[icon]="${2:-}" ; shift ;;
    --img        | -I ) __o[img]="${2:-}" ; shift ;;
    --tooltip    | -l ) __o[tooltip]="${2:-}" ; shift ;;
    --progress   | -p ) __o[progress]="${2:-}" ; shift ;;
    --click      | -C ) __o[click]="${2:-}" ; shift ;;
    --iconclick  | -c ) __o[iconclick]="${2:-}" ; shift ;;
    --expire-time | -t ) __o[expire-time]="${2:-}" ; shift ;;
    --foreground | -f ) __o[foreground]="${2:-}" ; shift ;;
    --background | -b ) __o[background]="${2:-}" ; shift ;;
    --msg        | -s ) __o[msg]="${2:-}" ; shift ;;
    --clear      | -x ) __o[clear]=1 ;; 
    --get        | -g ) __o[get]=1 ;; 
    --list       ) __o[list]=1 ;; 
    --help       | -h ) ___printhelp && exit ;;
    --version    | -v ) ___printversion && exit ;;
    -- ) shift ; break ;;
    *  ) break ;;
  esac
  shift
done

[[ ${__lastarg:="${!#:-}"} =~ ^--$|${0}$ ]] \
  && __lastarg="" 


main "${@:-}"


