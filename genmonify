#!/bin/bash

: "${XDG_CONFIG_HOME:=$HOME/.config}"
: "${GENMONIFY_DIR:=$XDG_CONFIG_HOME/genmonify}"
: "${GENMONIFY_TMP_DIR:=/tmp/genmonify}"

BASHBUD_VERBOSE=0 #bashbud

main(){

  # all non option arguments will be treated as the
  # message to display in the target genmon module
  message="$*"

  declare -A modules=([gurl]=2 [mediainfo]=10)

  # the aliasfile will override the modules array
  aliasfile=$GENMONIFY_DIR/module-list
  [[ -f $aliasfile ]] || createconf "$GENMONIFY_DIR"

  # shellcheck source=/dev/null
  source "$aliasfile"

  # module should here have the actual panel-id
  module="${_o[module]:+${modules[${_o[module]}]}}"

  # if no module is found in the modules array
  # it is still possible to trigger an update event
  # and the first found (?) genmon module will get
  # updated
  cmd_update=(
    xfce4-panel 
    "--plugin-event=genmon${module:+-$module}:refresh:bool:true"
  )

  trg_file="$GENMONIFY_TMP_DIR/${_o[module]:-default}"
  mkdir -p "${trg_file%/*}"

  # by always printing a zero_width_space
  # character we can clear the module and get no
  # funky output if f.i. the target file is empty
  # or removed
  zero_width_space=$(printf %b '\u200b')

  if ((_o[clear])); then
    echo -n "$zero_width_space" > "$trg_file"
    "${cmd_update[@]}" > /dev/null 2>&1
  elif ((_o[list])); then
    listall
  elif ((_o[get])); then
    # print everyting inside <msg> tag (set with -s)
    [[ -f $trg_file ]] \
      && sed -rn 's/^<msg>([^<]+)<.+/\1/p' "$trg_file"
  elif [[ -z $message${_o[img]}${_o[icon]} ]]; then
    # this is the default action that the module itself
    # should get. activated when there are no message.
    # genmonify --module MODULE_NAME
    echo -n "$zero_width_space"
    [[ -f $trg_file ]] && cat "$trg_file"
  else
    # write file and update
    op+="${_o[msg]:+<msg>${_o[msg]}</msg>$'\n'}"

    op+="<txt><span"
    op+="${_o[foreground]:+" foreground='${_o[foreground]}'"}"
    op+="${_o[background]:+" background='${_o[background]}'"}"
    op+=">${message//&/&amp;}</span></txt>"

    op+="${_o[tooltip]:+$'\n'<tool>${_o[tooltip]//&/&amp;}</tool>}"
    op+="${_o[icon]:+$'\n'<icon>${_o[icon]}</icon>}"
    op+="${_o[click]:+$'\n'<click>${_o[click]}</click>}"
    op+="${_o[iconclick]:+$'\n'<iconclick>${_o[iconclick]}</iconclick>}"
    op+="${_o[progress]:+$'\n'<bar>${_o[progress]}</bar>}"

    [[ -n ${_o[img]} && -f ${_o[img]} ]] \
      && op+=$'\n'"<img>${_o[img]}</img>"

    echo "$op" > "$trg_file"
    "${cmd_update[@]}" > /dev/null 2>&1

    ((_o[expire-time])) && { 
      sleep "${_o[expire-time]}"
      # don't clear if the module has changed during
      # the sleep:
      [[ $op = "$(< "$trg_file")" ]] && {
        echo -n "$zero_width_space" > "$trg_file"
        "${cmd_update[@]}" > /dev/null 2>&1
      }
    } &
  fi
  
}

__dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")") #bashbud
source "$__dir/_init.sh"                              #bashbud
